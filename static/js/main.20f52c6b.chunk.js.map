{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","role","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","str","split","i","forEach","word","length","properWord","charAt","slice","document","getElementById","select","navigator","clipboard","writeText","join","Alert","alert","class","lower","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.20f52c6b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              {/* <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              </li> */}\r\n              \r\n            </ul>\r\n            {/* <form className=\"d-flex\">\r\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n              <button className=\"btn btn-success\" type=\"submit\">Search</button>\r\n            </form> */}\r\n            <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n                    title : PropTypes.string.isRequired,\r\n                    aboutText : PropTypes.string\r\n                };\r\n\r\nNavbar.defaultProps = {\r\n                        title : 'Set title here',\r\n                        aboutText : 'about Us'\r\n}                ","import React ,{useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText]=useState(\"Enter text here\");\r\n    // text=\"ABABABA\"; //wrong way to update state of text variable this is not allowed in react it'll throw an Error\r\n    // setText(\"text Changed\"); //correct way to change the state of text variable using an updation function (here >>setText).\r\n\r\n    const handleUpClick=()=>{\r\n        console.log(\"Uppercase button was clicked\");\r\n        let newText=text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to UpperCase\",\"success\");\r\n    }\r\n\r\n    const handleLoClick=()=>{\r\n        console.log(\"LowerCase button was clicked\");\r\n        let newText=text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to LowerCase\",\"success\");\r\n    }\r\n\r\n    const handleClearText=()=>{\r\n        console.log(\"Clear Text Button was clicked\");\r\n        let newText=\"\";\r\n        setText(newText);\r\n        props.showAlert(\"Text Cleared!\",\"success\");\r\n    }\r\n\r\n    const handleKebabCase=()=>{\r\n        let str = text.split(\" \");\r\n        let newText=\"\";\r\n\r\n        let i=1;\r\n        str.forEach((word)=>{\r\n           if(i<str.length)\r\n           {\r\n            newText+=word+\"-\";\r\n           }else{\r\n               newText+=word;\r\n           }\r\n          \r\n           i++;\r\n        })     \r\n        setText(newText);\r\n        props.showAlert(\"Converted to KebabCase\",\"success\");\r\n    }\r\n\r\n\r\n    const handleProperCase=()=>{\r\n        let str = text.split(\" \");\r\n        let newText=\"\";\r\n\r\n        let i=1;\r\n        str.forEach((word)=>{\r\n            let properWord= word.charAt(0).toUpperCase() + word.slice(1);\r\n           if(i<str.length)\r\n           {\r\n            \r\n            newText+=properWord+\" \";\r\n           }else{\r\n               newText+=properWord;\r\n           }\r\n          \r\n           i++;\r\n        })     \r\n        setText(newText);\r\n        props.showAlert(\"Converted to ProperCase\",\"success\");\r\n    }\r\n\r\n    const handleCopyText=()=>{\r\n        var text=document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text Copied!\",\"success\");\r\n    }\r\n\r\n    const handleExtraSpaces=()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        newText=newText.join(\" \");\r\n        setText(newText);\r\n        props.showAlert(\"Extra spaces removed!\",\"success\");\r\n    }\r\n\r\n    \r\n    const handleOnChange=(event)=>{\r\n        console.log(\"onChange handled\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"mybox\" rows=\"8\" style={{backgroundColor : props.mode==='dark'?'grey':'white',\r\n        color : props.mode==='dark'?'white':'black'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary\" onClick={handleKebabCase}>Kebab Case</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleProperCase}>Proper Case</button>\r\n        \r\n            <button className=\"btn btn-primary\" onClick={handleClearText}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-3\" onClick={handleCopyText}>Copy Text</button>\r\n            <button className=\"btn btn-primary\" onClick={handleExtraSpaces}>Remove ExtraSpaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color : props.mode==='dark'?'white':'black'}}>\r\n            <h2>Your text summary</h2>\r\n            <p><b>{text.split(\" \").length}</b> words and <b>{text.length}</b> characters</p>\r\n            <p><b>{0.008*text.split(\" \").length}</b> Minutes read</p>\r\n            <h2>Preview</h2>\r\n             <p>{text.length>0?text : \"Enter text in the above textbox to preview it here.\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    function capitalize(word){\r\n       let lower=word.toLowerCase();\r\n       return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n       props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\r\n            {/* <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n      </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\n// const element = (\n//   <div>\n//     <h1>Hello!</h1>\n//     <h2>Good to see you here.</h2>\n//   </div>\n// );\nfunction App() {\n\n  const [mode,setMode]=useState(\"light\");\n\n  // const [modeText,setModeText]=useState(\"dark\");\n  const [alert,setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n    setAlert({\n      msg : message,\n      type : type\n    })\n    setTimeout(()=>{\n      setAlert(null);\n    },1500);\n  }\n\nconst toggleMode=()=>{\n  if(mode==='light'){\n    setMode('dark');\n    // setModeText('light');\n    document.body.style.backgroundColor='#042743';\n    showAlert(\"DarkMode has been Enabled\",\"success\")\n    document.title=\"Text-Utils DarkMode\";\n  }else{\n    setMode('light');\n    // setModeText('dark');\n    document.body.style.backgroundColor='white';\n    showAlert(\"LightMode has been Enabled\",\"success\");\n    document.title=\"Text-Utils DarkMode\";\n\n    // setInterval(() => {\n    //   document.title=\"Text-Utils is Amazing Mode\";\n    // }, 2000);\n\n    // setInterval(() => {\n    //   document.title=\"Install Text-Utils now\";\n    // }, 1500);\n  }\n \n}\n\n\n  return (\n    <>\n      {/* <Navbar title=\"textUtils\" aboutText=\"about textUtils\" /> */}\n      {/* <Navbar/> */}\n      {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n      <Alert alert={alert}/>\n      <div className=\"container my-3\">\n        {/* /Users-->Component 1\n        /Users/home-->Component 2 */}\n        {/* <Switch>\n          <Route exact path=\"/about\">\n              <About/>\n          </Route>\n          <Route exact path=\"/\"> */}\n              <TextForm heading = \"Enter the text to analyse\" mode={mode} showAlert={showAlert}/>\n          {/* </Route>\n        </Switch>   */}\n      </div>\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}